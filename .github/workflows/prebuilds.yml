name: prebuilds
on:
  workflow_call:
    inputs:
      provenance:
        type: boolean
      upload-assets:
        type: boolean

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{
      (matrix.os == 'linux' && 'ubuntu-24.04') ||
      (matrix.os == 'macos' && 'macos-15') ||
      (matrix.os == 'windows' && 'windows-2025') }}
    container:
      image: ${{ matrix.os == 'linux' && 'debian:11-slim' || null }}
    strategy:
      matrix:
        os: [linux, macos, windows]
        cross: ['']
        include:
          - { os: windows, cross: ia32 }
    outputs:
      hash-linux: ${{ steps.output.outputs.hash-linux }}
      hash-macos: ${{ steps.output.outputs.hash-macos }}
      hash-windows: ${{ steps.output.outputs.hash-windows }}
      hash-windows-ia32: ${{ steps.output.outputs.hash-windows-ia32 }}
      id-linux: ${{ steps.output.outputs.id-linux }}
      id-macos: ${{ steps.output.outputs.id-macos }}
      id-windows: ${{ steps.output.outputs.id-windows }}
      id-windows-ia32: ${{ steps.output.outputs.id-windows-ia32 }}
    env:
      JOBS: 3
    steps:
      - name: Install system dependencies
        run: apt-get update && apt-get -y install g++ g++-aarch64-linux-gnu g++-arm-linux-gnueabihf git jq make python3
        if: runner.os == 'Linux'
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: recursive
      - uses: ./.github/actions/setup
      - name: Build ${{ (runner.arch == 'ARM64' && 'arm64') || 'x64' }}
        run: bash .github/prebuild.sh
        if: matrix.cross == ''
      - name: Build arm cross
        run: bash .github/prebuild.sh arm
        if: runner.os == 'Linux'
        env:
          CC: arm-linux-gnueabihf-gcc
          CXX: arm-linux-gnueabihf-g++
      - name: Build arm64 cross
        run: bash .github/prebuild.sh arm64
        if: runner.os == 'Linux'
        env:
          CC: aarch64-linux-gnu-gcc
          CXX: aarch64-linux-gnu-g++
      - name: Build ia32 cross
        run: bash .github/prebuild.sh ia32
        if: matrix.cross == 'ia32'
      - name: Build x64 cross
        run: bash .github/prebuild.sh x64
        if: runner.os == 'macOS'
      - id: upload
        name: Upload prebuilds
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: prebuilds-${{ matrix.os }}${{ matrix.cross != '' && '-' || '' }}${{ matrix.cross }}
          path: prebuilds/
      - id: output
        run: |
          suffix='${{ matrix.os }}${{ matrix.cross != '' && '-' || '' }}${{ matrix.cross }}'
          echo "hash-${suffix}=$(openssl sha256 -r * | tr '*' ' ' | jq -Rrs @base64)" >> "$GITHUB_OUTPUT"
          echo "id-${suffix}=${{ steps.upload.outputs.artifact-id }}" >> "$GITHUB_OUTPUT"
        shell: bash
        working-directory: prebuilds

  upload-build:
    if: inputs.upload-assets
    needs: [build]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - id: artifacts
        run: echo "ids=$(jq -nr '[env.INPUTS|fromjson|with_entries(select(.key|startswith("id-"))).[]]|join(",")')" >> "$GITHUB_OUTPUT"
        env:
          INPUTS: ${{ toJSON(needs.build.outputs) }}
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          artifact-ids: ${{ steps.artifacts.outputs.ids }}
          merge-multiple: true
          path: prebuilds
      - run: gh release upload '${{ github.ref_name }}' ./prebuilds/*.tar.gz
        env:
          GH_TOKEN: ${{ github.token }}

  test-build:
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: macos-13, arch: x64 }
          - { os: macos-14, arch: arm64 }
          - { os: ubuntu-22.04, arch: arm }
          - { os: ubuntu-22.04-arm, arch: arm64 }
          - { os: ubuntu-22.04, arch: x64 }
          - { os: windows-2022, arch: ia32 }
          - { os: windows-2022, arch: x64 }
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: ./.github/actions/setup
        with:
          architecture: ${{ (matrix.arch == 'ia32' && 'x86') || null }}
      - uses: docker/setup-qemu-action@v3.2.0
        if: runner.os == 'Linux' && matrix.arch == 'arm'
        with:
          platforms: ${{ matrix.arch }}
      - uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: prebuilds-${{ (matrix.os == 'macos-13' && 'macos-14') || (matrix.os == 'ubuntu-22.04-arm' && 'ubuntu-22.04') || matrix.os }}
      - run: tar xf zstd-napi-v*-napi-v8-*-${{ matrix.arch }}.tar.gz
        shell: bash
      # FIXME: Build buster-slim image for latest 18.x
      - name: Run npm run test in Docker${{ (matrix.arch == 'arm' && ' with QEMU') || '' }}
        run: |
          docker run --platform linux/${{ (matrix.arch == 'x64' && 'amd64') || matrix.arch }} \
            -v $(pwd):/code -w /code node:18.20.3-buster-slim \
            npm run test -- --testTimeout 120000 --forceExit false
        if: runner.os == 'Linux'
      - run: npm run test
        if: runner.os != 'Linux'

  hashes:
    needs: [build]
    if: inputs.provenance
    runs-on: ubuntu-24.04
    outputs:
      hashes: ${{ steps.combine.outputs.hashes }}
    steps:
      - id: combine
        run: echo "hashes=$(jq -nr '[env.INPUTS|fromjson|with_entries(select(.key|startswith("hash-")))|.[]|@base64d]|join("")|@base64')" >> "$GITHUB_OUTPUT"
        env:
          INPUTS: ${{ toJSON(needs.build.outputs) }}
      - run: echo "${{ steps.combine.outputs.hashes }}"

  provenance:
    needs: [hashes]
    if: inputs.provenance
    permissions:
      actions: read
      contents: write
      id-token: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: ${{ needs.hashes.outputs.hashes }}
      provenance-name: prebuilds.intoto.jsonl

  upload-provenance:
    if: inputs.provenance && inputs.upload-assets
    needs: [provenance]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: ${{ needs.provenance.outputs.provenance-name }}
      - run: gh release upload '${{ github.ref_name }}' '${{ needs.provenance.outputs.provenance-name }}'
        env:
          GH_TOKEN: ${{ github.token }}
