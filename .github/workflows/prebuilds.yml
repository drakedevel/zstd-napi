name: prebuilds
on:
  workflow_call:
    inputs:
      provenance:
        type: boolean
      upload-assets:
        type: boolean

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.os == 'ubuntu-22.04' && 'debian:10-slim' || null }}
    strategy:
      matrix:
        os: [macos-14, ubuntu-22.04, windows-2022]
    outputs:
      hash-macos-14: ${{ steps.hash.outputs.hash-macos-14 }}
      hash-ubuntu-22.04: ${{ steps.hash.outputs['hash-ubuntu-22.04'] }}
      hash-windows-2022: ${{ steps.hash.outputs.hash-windows-2022 }}
    env:
      JOBS: 3
    steps:
      - name: Install system dependencies
        run: apt-get update && apt-get -y install g++ g++-aarch64-linux-gnu g++-arm-linux-gnueabihf git jq make python3
        if: runner.os == 'Linux'
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          submodules: recursive
      - uses: ./.github/actions/setup
      - name: Build ${{ (runner.os == 'macOS' && 'arm64') || 'x64' }}
        run: bash .github/prebuild.sh
      - name: Build arm cross
        run: bash .github/prebuild.sh arm
        if: runner.os == 'Linux'
        env:
          CC: arm-linux-gnueabihf-gcc
          CXX: arm-linux-gnueabihf-g++
      - name: Build arm64 cross
        run: bash .github/prebuild.sh arm64
        if: runner.os == 'Linux'
        env:
          CC: aarch64-linux-gnu-gcc
          CXX: aarch64-linux-gnu-g++
      - name: Build ia32 cross
        run: bash .github/prebuild.sh ia32
        if: runner.os == 'Windows'
      - name: Build x64 cross
        run: bash .github/prebuild.sh x64
        if: runner.os == 'macOS'
      - name: Upload prebuilds
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: prebuilds-${{ matrix.os }}
          path: prebuilds/
      - id: hash
        run: echo "hash-${{ matrix.os }}=$(openssl sha256 -r * | tr '*' ' ' | jq -Rrs @base64)" >> "$GITHUB_OUTPUT"
        shell: bash
        working-directory: prebuilds

  upload-build:
    if: inputs.upload-assets
    needs: [build]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: prebuilds-*
          merge-multiple: true
          path: prebuilds
      - run: gh release upload '${{ github.ref_name }}' ./prebuilds/*.tar.gz
        env:
          GH_TOKEN: ${{ github.token }}

  hashes:
    needs: [build]
    if: inputs.provenance
    runs-on: ubuntu-22.04
    outputs:
      hashes: ${{ steps.combine.outputs.hashes }}
    steps:
      - id: combine
        run: echo "hashes=$(jq -nr '[env.HASHES|fromjson|.[]|@base64d]|join("")|@base64')" >> "$GITHUB_OUTPUT"
        env:
          HASHES: ${{ toJSON(needs.build.outputs) }}
      - run: echo "${{ steps.combine.outputs.hashes }}"

  provenance:
    needs: [hashes]
    if: inputs.provenance
    permissions:
      actions: read
      contents: write
      id-token: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: ${{ needs.hashes.outputs.hashes }}
      provenance-name: prebuilds.intoto.jsonl

  upload-provenance:
    if: inputs.provenance && inputs.upload-assets
    needs: [provenance]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.provenance.outputs.provenance-name }}
      - run: gh release upload '${{ github.ref_name }}' '${{ needs.provenance.outputs.provenance-name }}'
        env:
          GH_TOKEN: ${{ github.token }}
