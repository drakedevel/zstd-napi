name: prebuilds
on:
  workflow_call:
    inputs:
      provenance:
        type: boolean
      upload-assets:
        type: boolean

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ (matrix.os == 'ubuntu-24.04' || matrix.os == 'ubuntu-24.04-arm') && 'almalinux:8-minimal' || null }}
    strategy:
      matrix:
        os: [macos-14, ubuntu-24.04, ubuntu-24.04-arm, windows-2022]
    outputs:
      hash-macos-14: ${{ steps.hash.outputs.hash-macos-14 }}
      hash-ubuntu-24.04: ${{ steps.hash.outputs['hash-ubuntu-24.04'] }}
      hash-ubuntu-24.04-arm: ${{ steps.hash.outputs['hash-ubuntu-24.04-arm'] }}
      hash-windows-2022: ${{ steps.hash.outputs.hash-windows-2022 }}
    env:
      JOBS: 3
      ZSTD_NAPI_ENABLE_HARDEN: 1
      ZSTD_NAPI_ENABLE_LTO: 1
    steps:
      - name: Install system dependencies
        run: microdnf -y install gcc-toolset-14 git jq python3 tar
        if: runner.os == 'Linux'
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: recursive
      - uses: ./.github/actions/setup
      - name: Build ${{ ((runner.os == 'macOS' || matrix.os == 'ubuntu-24.04-arm') && 'arm64') || 'x64' }}
        run: ${{ ((matrix.os == 'ubuntu-24.04' || matrix.os == 'ubuntu-24.04-arm') && 'scl enable gcc-toolset-14 --') || '' }} bash .github/prebuild.sh
      # - name: Build arm cross
      #   run: bash .github/prebuild.sh arm
      #   if: runner.os == 'Linux'
      #   env:
      #     CC: arm-linux-gnueabihf-gcc
      #     CXX: arm-linux-gnueabihf-g++
      - name: Build ia32 cross
        run: bash .github/prebuild.sh ia32
        if: runner.os == 'Windows'
      - name: Build x64 cross
        run: bash .github/prebuild.sh x64
        if: runner.os == 'macOS'
      - name: Upload prebuilds
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: prebuilds-${{ matrix.os }}
          path: prebuilds/
      - id: hash
        run: echo "hash-${{ matrix.os }}=$(openssl sha256 -r * | tr '*' ' ' | jq -Rrs @base64)" >> "$GITHUB_OUTPUT"
        shell: bash
        working-directory: prebuilds

  upload-build:
    if: inputs.upload-assets
    needs: [build]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: prebuilds-*
          merge-multiple: true
          path: prebuilds
      - run: gh release upload '${{ github.ref_name }}' ./prebuilds/*.tar.gz
        env:
          GH_TOKEN: ${{ github.token }}

  test-build:
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: macos-13, arch: x64 }
          - { os: macos-14, arch: arm64 }
          - { os: ubuntu-24.04-arm, arch: arm }
          - { os: ubuntu-24.04-arm, arch: arm64 }
          - { os: ubuntu-24.04, arch: x64 }
          - { os: windows-2022, arch: ia32 }
          - { os: windows-2022, arch: x64 }
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: ./.github/actions/setup
        with:
          architecture: ${{ (matrix.arch == 'ia32' && 'x86') || null }}
      - uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: prebuilds-${{ (matrix.os == 'macos-13' && 'macos-14') || (matrix.os == 'ubuntu-24.04-arm' && 'ubuntu-24.04') || matrix.os }}
      - run: tar xf zstd-napi-v*-napi-v8-*-${{ matrix.arch }}.tar.gz
        shell: bash
      # FIXME: Build buster-slim image for latest 18.x
      - name: Run npm run test in Docker
        run: |
          docker run --platform linux/${{ (matrix.arch == 'x64' && 'amd64') || matrix.arch }} \
            -v $(pwd):/code -w /code node:18.20.3-buster-slim npm run test
        if: runner.os == 'Linux'
      - run: npm run test
        if: runner.os != 'Linux'

  hashes:
    needs: [build]
    if: inputs.provenance
    runs-on: ubuntu-24.04
    outputs:
      hashes: ${{ steps.combine.outputs.hashes }}
    steps:
      - id: combine
        run: echo "hashes=$(jq -nr '[env.HASHES|fromjson|.[]|@base64d]|join("")|@base64')" >> "$GITHUB_OUTPUT"
        env:
          HASHES: ${{ toJSON(needs.build.outputs) }}
      - run: echo "${{ steps.combine.outputs.hashes }}"

  provenance:
    needs: [hashes]
    if: inputs.provenance
    permissions:
      actions: read
      contents: write
      id-token: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: ${{ needs.hashes.outputs.hashes }}
      provenance-name: prebuilds.intoto.jsonl

  upload-provenance:
    if: inputs.provenance && inputs.upload-assets
    needs: [provenance]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ needs.provenance.outputs.provenance-name }}
      - run: gh release upload '${{ github.ref_name }}' '${{ needs.provenance.outputs.provenance-name }}'
        env:
          GH_TOKEN: ${{ github.token }}
